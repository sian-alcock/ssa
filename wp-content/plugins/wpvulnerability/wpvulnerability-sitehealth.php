<?php
/**
 * Site Health functions
 *
 * @package WPVulnerability
 *
 * @version 2.0.0
 */

defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

/**
 * Tests for vulnerabilities in installed plugins.
 *
 * @version 2.0.0
 *
 * @return array Returns an array with the results of the vulnerability test.
 */
function wpvulnerability_test_plugins() {

	// Define the initial test result values.
	$result = array(
		'label'       => __( 'There aren\'t plugins vulnerabilities', 'wpvulnerability' ),
		'status'      => 'good',
		'badge'       => array(
			'label' => __( 'Security', 'wpvulnerability' ),
			'color' => 'green',
		),
		'description' => sprintf(
			'<p>%s</p>',
			__( 'Shows possible vulnerabilities that exist in installed plugins.', 'wpvulnerability' )
		),
		'actions'     => '',
		'test'        => 'wpvulnerability_plugins',
	);

	// Check if any plugin vulnerabilities were found.
	if ( is_multisite() ) {
		$wpvulnerability_test_plugins_counter = json_decode( get_site_option( 'wpvulnerability-plugins-vulnerable' ) );
	} elseif ( ! is_multisite() ) {
		$wpvulnerability_test_plugins_counter = json_decode( get_option( 'wpvulnerability-plugins-vulnerable' ) );
	}

	if ( $wpvulnerability_test_plugins_counter ) {
		$result['status'] = 'critical';
		/* translators: Site Health message */
		$result['label']          = sprintf( _n( 'There is %d plugin with vulnerabilities', 'There are %d plugins with vulnerabilities', $wpvulnerability_test_plugins_counter, 'wpvulnerability' ), $wpvulnerability_test_plugins_counter );
		$result['badge']['color'] = 'red';
		$result['description']    = sprintf(
			'<p>%1$s</p> %2$s',
			__( 'We\'ve detected potential vulnerabilities in installed plugins. Please check them and keep them updated.', 'wpvulnerability' ),
			wpvulnerability_html_plugins()
		);

		// Add action links to update plugins.
		if ( is_multisite() ) {
			$result['actions'] .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( network_admin_url( 'plugins.php' ) ),
				__( 'Update plugins', 'wpvulnerability' )
			);
		} else {
			$result['actions'] .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( admin_url( 'plugins.php' ) ),
				__( 'Update plugins', 'wpvulnerability' )
			);
		}
	}

	return $result;
}

/**
 * Tests for vulnerabilities in installed themes.
 *
 * @version 2.0.0
 *
 * @return array Returns an array with the results of the vulnerability test.
 */
function wpvulnerability_test_themes() {

	// Define the initial test result values.
	$result = array(
		'label'       => __( 'There aren\'t themes vulnerabilities', 'wpvulnerability' ),
		'status'      => 'good',
		'badge'       => array(
			'label' => __( 'Security', 'wpvulnerability' ),
			'color' => 'green',
		),
		'description' => sprintf(
			'<p>%s</p>',
			__( 'Shows possible vulnerabilities that exist in installed themes.', 'wpvulnerability' )
		),
		'actions'     => '',
		'test'        => 'wpvulnerability_themes',
	);

	// Check if any theme vulnerabilities were found.
	if ( is_multisite() ) {
		$wpvulnerability_test_themes_counter = json_decode( get_site_option( 'wpvulnerability-themes-vulnerable' ) );
	} else {
		$wpvulnerability_test_themes_counter = json_decode( get_option( 'wpvulnerability-themes-vulnerable' ) );
	}

	if ( $wpvulnerability_test_themes_counter ) {
		$result['status'] = 'critical';
		/* translators: Site Health message */
		$result['label']          = sprintf( _n( 'There is %d theme with vulnerabilities', 'There are %d themes with vulnerabilities', $wpvulnerability_test_themes_counter, 'wpvulnerability' ), $wpvulnerability_test_themes_counter );
		$result['badge']['color'] = 'red';
		$result['description']    = sprintf(
			'<p>%1$s</p> %2$s',
			__( 'We\'ve detected potential vulnerabilities in installed themes. Please check them and keep them updated.', 'wpvulnerability' ),
			wpvulnerability_html_themes()
		);

		// Add action links to update themes.
		if ( is_multisite() ) {
			$result['actions'] .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( network_admin_url( 'themes.php' ) ),
				__( 'Update themes', 'wpvulnerability' )
			);
		} else {
			$result['actions'] .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( admin_url( 'themes.php' ) ),
				__( 'Update themes', 'wpvulnerability' )
			);
		}
	}

	return $result;
}

/**
 * Tests for vulnerabilities in core.
 *
 * @version 2.0.0
 *
 * @return array Returns an array with the results of the vulnerability test.
 */
function wpvulnerability_test_core() {

	// Define the initial test result values.
	$result = array(
		'label'       => __( 'There aren\'t WordPress vulnerabilities', 'wpvulnerability' ),
		'status'      => 'good',
		'badge'       => array(
			'label' => __( 'Security', 'wpvulnerability' ),
			'color' => 'green',
		),
		'description' => sprintf(
			'<p>%s</p>',
			__( 'Shows possible vulnerabilities existing in the WordPress core.', 'wpvulnerability' )
		),
		'actions'     => '',
		'test'        => 'wpvulnerability_core',
	);

	// Check if any core vulnerabilities were found.
	if ( is_multisite() ) {
		$wpvulnerability_test_core_counter = json_decode( get_site_option( 'wpvulnerability-core-vulnerable' ) );
	} else {
		$wpvulnerability_test_core_counter = json_decode( get_option( 'wpvulnerability-core-vulnerable' ) );
	}

	if ( $wpvulnerability_test_core_counter ) {
		$result['status'] = 'critical';
		/* translators: Site Health message */
		$result['label']          = sprintf( _n( 'There is %d core vulnerability', 'There are %d core vulnerabilities', $wpvulnerability_test_core_counter, 'wpvulnerability' ), $wpvulnerability_test_core_counter );
		$result['badge']['color'] = 'red';
		$result['description']    = sprintf(
			'<p>%1$s</p> %2$s',
			__( 'We\'ve detected potential vulnerabilities in this WordPress installation. Please check them and keep your installation updated.', 'wpvulnerability' ),
			wpvulnerability_html_core()
		);

		// Add action links to update WordPress.
		if ( is_multisite() ) {
			$result['actions'] .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( network_admin_url( 'update-core.php' ) ),
				__( 'Update WordPress', 'wpvulnerability' )
			);
		} else {
			$result['actions'] .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( admin_url( 'update-core.php' ) ),
				__( 'Update WordPress', 'wpvulnerability' )
			);
		}
	}

	return $result;
}

/**
 * Tests for vulnerabilities in PHP.
 *
 * @version 3.0.0
 *
 * @return array Returns an array with the results of the vulnerability test.
 */
function wpvulnerability_test_php() {

	// Define the initial test result values.
	$result = array(
		'label'       => __( 'There aren\'t PHP vulnerabilities', 'wpvulnerability' ),
		'status'      => 'good',
		'badge'       => array(
			'label' => __( 'Security', 'wpvulnerability' ),
			'color' => 'green',
		),
		'description' => sprintf(
			'<p>%s</p>',
			__( 'Shows possible vulnerabilities existing in PHP.', 'wpvulnerability' )
		),
		'actions'     => '',
		'test'        => 'wpvulnerability_php',
	);

	// Check if any PHP vulnerabilities were found.
	if ( is_multisite() ) {
		$wpvulnerability_test_php_counter = json_decode( get_site_option( 'wpvulnerability-php-vulnerable' ) );
	} else {
		$wpvulnerability_test_php_counter = json_decode( get_option( 'wpvulnerability-php-vulnerable' ) );
	}

	if ( $wpvulnerability_test_php_counter ) {
		$result['status'] = 'critical';
		/* translators: Site Health message */
		$result['label']          = sprintf( _n( 'There is %d PHP vulnerability', 'There are %d PHP vulnerabilities', $wpvulnerability_test_php_counter, 'wpvulnerability' ), $wpvulnerability_test_php_counter );
		$result['badge']['color'] = 'red';
		$result['description']    = sprintf(
			'<p>%1$s</p> %2$s',
			__( 'We\'ve detected potential vulnerabilities in PHP. Please check them and keep your installation updated.', 'wpvulnerability' ),
			wpvulnerability_html_php()
		);
		$result['actions']       .= sprintf(
			'<p><a href="%s">%s</a></p>',
			esc_url( wp_get_update_php_url() ),
			__( 'How to update PHP', 'wpvulnerability' )
		);
	}

	return $result;
}

/**
 * Tests for vulnerabilities in Apache.
 *
 * @version 3.2.0
 *
 * @return array Returns an array with the results of the vulnerability test.
 */
function wpvulnerability_test_apache() {

	// Define the initial test result values.
	$result = array(
		'label'       => __( 'There aren\'t Apache HTTPD vulnerabilities', 'wpvulnerability' ),
		'status'      => 'good',
		'badge'       => array(
			'label' => __( 'Security', 'wpvulnerability' ),
			'color' => 'green',
		),
		'description' => sprintf(
			'<p>%s</p>',
			__( 'Shows possible vulnerabilities existing in Apache HTTPD.', 'wpvulnerability' )
		),
		'actions'     => '',
		'test'        => 'wpvulnerability_apache',
	);

	// Check if any Apache vulnerabilities were found.
	if ( is_multisite() ) {
		$wpvulnerability_test_apache_counter = json_decode( get_site_option( 'wpvulnerability-apache-vulnerable' ) );
	} else {
		$wpvulnerability_test_apache_counter = json_decode( get_option( 'wpvulnerability-apache-vulnerable' ) );
	}

	if ( $wpvulnerability_test_apache_counter ) {
		$result['status'] = 'critical';
		/* translators: Site Health message */
		$result['label']          = sprintf( _n( 'There is %d Apache HTTPD vulnerability', 'There are %d Apache HTTPD vulnerabilities', $wpvulnerability_test_apache_counter, 'wpvulnerability' ), $wpvulnerability_test_apache_counter );
		$result['badge']['color'] = 'red';
		$result['description']    = sprintf(
			'<p>%1$s</p> %2$s',
			__( 'We\'ve detected potential vulnerabilities in Apache HTTPD. Please check them and keep your installation updated.', 'wpvulnerability' ),
			wpvulnerability_html_apache()
		);
	}

	return $result;
}

/**
 * Tests for vulnerabilities in nginx.
 *
 * @version 3.2.0
 *
 * @return array Returns an array with the results of the vulnerability test.
 */
function wpvulnerability_test_nginx() {

	// Define the initial test result values.
	$result = array(
		'label'       => __( 'There aren\'t nginx vulnerabilities', 'wpvulnerability' ),
		'status'      => 'good',
		'badge'       => array(
			'label' => __( 'Security', 'wpvulnerability' ),
			'color' => 'green',
		),
		'description' => sprintf(
			'<p>%s</p>',
			__( 'Shows possible vulnerabilities existing in nginx.', 'wpvulnerability' )
		),
		'actions'     => '',
		'test'        => 'wpvulnerability_nginx',
	);

	// Check if any nginx vulnerabilities were found.
	if ( is_multisite() ) {
		$wpvulnerability_test_nginx_counter = json_decode( get_site_option( 'wpvulnerability-nginx-vulnerable' ) );
	} else {
		$wpvulnerability_test_nginx_counter = json_decode( get_option( 'wpvulnerability-nginx-vulnerable' ) );
	}

	if ( $wpvulnerability_test_nginx_counter ) {
		$result['status'] = 'critical';
		/* translators: Site Health message */
		$result['label']          = sprintf( _n( 'There is %d nginx vulnerability', 'There are %d nginx vulnerabilities', $wpvulnerability_test_nginx_counter, 'wpvulnerability' ), $wpvulnerability_test_nginx_counter );
		$result['badge']['color'] = 'red';
		$result['description']    = sprintf(
			'<p>%1$s</p> %2$s',
			__( 'We\'ve detected potential vulnerabilities in nginx. Please check them and keep your installation updated.', 'wpvulnerability' ),
			wpvulnerability_html_nginx()
		);
	}

	return $result;
}

/**
 * Tests for vulnerabilities in MariaDB.
 *
 * This function checks for any known vulnerabilities in the MariaDB installation.
 * It returns an array with the results, including status, description, and actions.
 *
 * @since 3.4.0
 *
 * @return array Returns an array with the results of the vulnerability test.
 */
function wpvulnerability_test_mariadb() {

	// Define the initial test result values.
	$result = array(
		'label'       => __( 'There aren\'t MariaDB vulnerabilities', 'wpvulnerability' ),
		'status'      => 'good',
		'badge'       => array(
			'label' => __( 'Security', 'wpvulnerability' ),
			'color' => 'green',
		),
		'description' => sprintf(
			'<p>%s</p>',
			__( 'This test checks for known vulnerabilities in your MariaDB installation.', 'wpvulnerability' )
		),
		'actions'     => '',
		'test'        => 'wpvulnerability_mariadb',
	);

	// Check if any MariaDB vulnerabilities were found.
	$wpvulnerability_test_mariadb_counter = is_multisite()
		? json_decode( get_site_option( 'wpvulnerability-mariadb-vulnerable' ) )
		: json_decode( get_option( 'wpvulnerability-mariadb-vulnerable' ) );

	if ( $wpvulnerability_test_mariadb_counter ) {
		$result['status'] = 'critical';
		$result['label']  = sprintf(
			/* translators: %d is the number of vulnerabilities detected. */
			_n( 'There is %d MariaDB vulnerability', 'There are %d MariaDB vulnerabilities', $wpvulnerability_test_mariadb_counter, 'wpvulnerability' ),
			$wpvulnerability_test_mariadb_counter
		);
		$result['badge']['color'] = 'red';
		$result['description']    = sprintf(
			'<p>%1$s</p> %2$s',
			__( 'Potential vulnerabilities have been detected in your MariaDB installation. Please review them and ensure your database is up to date.', 'wpvulnerability' ),
			wpvulnerability_html_mariadb()
		);
	}

	return $result;
}

/**
 * Tests for vulnerabilities in MySQL.
 *
 * This function checks for any known vulnerabilities in the MySQL installation.
 * It returns an array with the results, including status, description, and actions.
 *
 * @since 3.4.0
 *
 * @return array Returns an array with the results of the vulnerability test.
 */
function wpvulnerability_test_mysql() {

	// Define the initial test result values.
	$result = array(
		'label'       => __( 'There aren\'t MySQL vulnerabilities', 'wpvulnerability' ),
		'status'      => 'good',
		'badge'       => array(
			'label' => __( 'Security', 'wpvulnerability' ),
			'color' => 'green',
		),
		'description' => sprintf(
			'<p>%s</p>',
			__( 'This test checks for known vulnerabilities in your MySQL installation.', 'wpvulnerability' )
		),
		'actions'     => '',
		'test'        => 'wpvulnerability_mysql',
	);

	// Check if any MySQL vulnerabilities were found.
	$wpvulnerability_test_mysql_counter = is_multisite()
		? json_decode( get_site_option( 'wpvulnerability-mysql-vulnerable' ) )
		: json_decode( get_option( 'wpvulnerability-mysql-vulnerable' ) );

	if ( $wpvulnerability_test_mysql_counter ) {
		$result['status'] = 'critical';
		$result['label']  = sprintf(
			/* translators: %d is the number of vulnerabilities detected. */
			_n( 'There is %d MySQL vulnerability', 'There are %d MySQL vulnerabilities', $wpvulnerability_test_mysql_counter, 'wpvulnerability' ),
			$wpvulnerability_test_mysql_counter
		);
		$result['badge']['color'] = 'red';
		$result['description']    = sprintf(
			'<p>%1$s</p> %2$s',
			__( 'Potential vulnerabilities have been detected in your MySQL installation. Please review them and ensure your database is up to date.', 'wpvulnerability' ),
			wpvulnerability_html_mysql()
		);
	}

	return $result;
}

/**
 * Adds vulnerability tests to the Health Check & Troubleshooting page.
 *
 * This function registers various vulnerability tests for different components of the site, such as
 * WordPress core, themes, plugins, PHP, Apache, nginx, MariaDB, and MySQL, to the Site Health status page.
 *
 * @since 2.0.0
 *
 * @param array $tests Array of current site status tests.
 *
 * @return array The updated array of site status tests.
 */
function wpvulnerability_tests( $tests ) {

	if ( wpvulnerability_analyze_filter( 'core' ) ) {
		// Add test for Core WordPress vulnerabilities.
		$tests['direct']['wpvulnerability_core'] = array(
			'label' => __( 'WPVulnerability Core', 'wpvulnerability' ),
			'test'  => 'wpvulnerability_test_core',
		);
	}

	if ( wpvulnerability_analyze_filter( 'themes' ) ) {
		// Add test for Theme vulnerabilities.
		$tests['direct']['wpvulnerability_themes'] = array(
			'label' => __( 'WPVulnerability Themes', 'wpvulnerability' ),
			'test'  => 'wpvulnerability_test_themes',
		);
	}

	if ( wpvulnerability_analyze_filter( 'plugins' ) ) {
		// Add test for Plugin vulnerabilities.
		$tests['direct']['wpvulnerability_plugins'] = array(
			'label' => __( 'WPVulnerability Plugins', 'wpvulnerability' ),
			'test'  => 'wpvulnerability_test_plugins',
		);
	}

	if ( wpvulnerability_analyze_filter( 'php' ) ) {
		// Add test for PHP vulnerabilities.
		$tests['direct']['wpvulnerability_php'] = array(
			'label' => __( 'WPVulnerability PHP', 'wpvulnerability' ),
			'test'  => 'wpvulnerability_test_php',
		);
	}

	if ( wpvulnerability_analyze_filter( 'apache' ) ) {
		// Add test for Apache vulnerabilities.
		$tests['direct']['wpvulnerability_apache'] = array(
			'label' => __( 'WPVulnerability Apache HTTPD', 'wpvulnerability' ),
			'test'  => 'wpvulnerability_test_apache',
		);
	}

	if ( wpvulnerability_analyze_filter( 'nginx' ) ) {
		// Add test for nginx vulnerabilities.
		$tests['direct']['wpvulnerability_nginx'] = array(
			'label' => __( 'WPVulnerability nginx', 'wpvulnerability' ),
			'test'  => 'wpvulnerability_test_nginx',
		);
	}

	if ( wpvulnerability_analyze_filter( 'mariadb' ) ) {
		// Add test for MariaDB vulnerabilities.
		$tests['direct']['wpvulnerability_mariadb'] = array(
			'label' => __( 'WPVulnerability MariaDB', 'wpvulnerability' ),
			'test'  => 'wpvulnerability_test_mariadb',
		);
	}

	if ( wpvulnerability_analyze_filter( 'mysql' ) ) {
		// Add test for MySQL vulnerabilities.
		$tests['direct']['wpvulnerability_mysql'] = array(
			'label' => __( 'WPVulnerability MySQL', 'wpvulnerability' ),
			'test'  => 'wpvulnerability_test_mysql',
		);
	}

	return $tests;
}

// Adds the vulnerability tests to the site status tests.
add_filter( 'site_status_tests', 'wpvulnerability_tests' );
